/**
 * Simulator Output Reader Controller
 * 
 * Reads and parses train position data from CSV files generated by the SubwaySimulator.jar
 * process. Monitors the output directory for the latest simulation data and converts it
 * into Train objects for the application to use.
 * 
 * Key responsibilities:
 * - Reading CSV files from simulator output directory
 * - Parsing train position and direction data
 * - Maintaining up-to-date train information
 * - Finding and processing the most recent simulation file
 * 
 * @author Subway Screen Development Team
 * @version 2.0
 */
package ca.ucalgary.edu.ensf380.controller;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import ca.ucalgary.edu.ensf380.model.Train;
import ca.ucalgary.edu.ensf380.util.AppConstants;
import ca.ucalgary.edu.ensf380.util.AppLogger;

public class ReadSimulatorOutput {
    private static final ArrayList<Train> trains = new ArrayList<>();

    public ReadSimulatorOutput() {
        AppLogger.debug("ReadSimulatorOutput controller initialized");
    }
    
    /**
     * Returns the list of trains.
     *
     * @return ArrayList of Train objects
     */
    public ArrayList<Train> getTrains() {
        return trains;
    }
    
    /**
     * Reads the latest CSV file output from the simulator and populates the train list
     * with improved error handling and logging.
     */
    public void readOutput() {
        trains.clear();
        File folder = new File(AppConstants.OUTPUT_PATH);

        // Check if folder exists
        if (!folder.exists() || !folder.isDirectory()) {
            AppLogger.warning("Simulator output directory not found: " + AppConstants.OUTPUT_PATH);
            return;
        }

        File[] listOfFiles = folder.listFiles();
        File latest = getLatestFile(listOfFiles);

        // Check if there are any files
        if (latest == null) {
            AppLogger.warning("No simulator output files found in: " + AppConstants.OUTPUT_PATH);
            return;
        }

        AppLogger.debug("Reading latest simulator file: " + latest.getName());
        long startTime = System.currentTimeMillis();
        int trainCount = 0;

        try (BufferedReader br = new BufferedReader(new FileReader(latest))) {
            String line;

            // Skip the header line if present
            if ((line = br.readLine()) != null) {
                AppLogger.debug("Skipping header line: " + line);
            }

            // Read train data lines
            while ((line = br.readLine()) != null) {
                if (line.trim().isEmpty()) {
                    continue; // Skip empty lines
                }

                String[] values = line.split(",");

                // Validate the number of values before accessing indices
                if (values.length >= 4) {
                    setTrains(values[1], values[2], values[3]);
                    trainCount++;
                    AppLogger.debug("Parsed train data: " + values[1] + " at " + values[2] + " moving " + values[3]);
                } else {
                    AppLogger.warning("Invalid train data format in line: " + line);
                }
            }
            
            long duration = System.currentTimeMillis() - startTime;
            AppLogger.data("Simulator Output", String.format("Loaded %d trains from %s in %d ms", 
                trainCount, latest.getName(), duration));
            
        } catch (IOException e) {
            AppLogger.error("Error reading simulator output file: " + latest.getName(), e);
        }
    }
    
    /**
     * Retrieves the latest file based on the last modified date.
     *
     * @param files an array of File objects
     * @return the latest modified File object or null if no files are present
     */
    private File getLatestFile(File[] files) {
        if (files == null || files.length == 0) {
            return null;
        }

        // Sort by last modified time in descending order
        Arrays.sort(files, Comparator.comparingLong(File::lastModified).reversed());
        
        // Find the first valid CSV file
        for (File file : files) {
            if (file.isFile() && file.getName().toLowerCase().endsWith(".csv")) {
                AppLogger.debug("Latest simulation file found: " + file.getName());
                return file;
            }
        }
        
        AppLogger.warning("No valid CSV files found in simulator output directory");
        return null;
    }
    
    /**
     * Adds a Train object to the list with the specified details and validation.
     *
     * @param number the train number
     * @param station the station name
     * @param dir the train direction
     */
    private void setTrains(String number, String station, String dir) {
        // Validate input parameters
        if (number == null || number.trim().isEmpty()) {
            AppLogger.warning("Invalid train number: " + number);
            return;
        }
        
        if (station == null || station.trim().isEmpty()) {
            AppLogger.warning("Invalid station for train " + number + ": " + station);
            return;
        }
        
        if (dir == null || dir.trim().isEmpty()) {
            AppLogger.warning("Invalid direction for train " + number + ": " + dir);
            return;
        }
        
        Train train = new Train(number.trim(), station.trim(), dir.trim());
        trains.add(train);
    }
    
    /**
     * Get statistics about the current train data
     */
    public int getTrainCount() {
        return trains.size();
    }
    
    /**
     * Check if train data is available
     */
    public boolean hasTrainData() {
        return !trains.isEmpty();
    }
}
